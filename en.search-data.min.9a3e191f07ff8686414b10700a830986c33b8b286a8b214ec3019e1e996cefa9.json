[{"id":0,"href":"/technical-committee/docs/joining/application/","title":"Applying as OpenRail project","section":"Joining OpenRail","content":" Applying to become an OpenRail project # The OpenRail Association provides hosting to open source projects within the railway sector. Its goal is to facilitate collaboration across organizations so that the huge challenges of the sector can be addressed in a joint effort, effectively and efficiently. The OpenRail Association is open to all participants of the sector, railway companies, vendors, and research institutes, which commit to working on open source software in an open model.\nHosting an open source project means that the OpenRail Association provides the neutral ground where a diverse set of participants can meet under clear conditions and collaborate openly. The OpenRail Association provides infrastructure (mainly through its organization on GitHub) and support for running projects according to proven open source practices. It also provides legitimacy and visibility for open source projects, and a strong international network of like-minded people from the railway sector.\nDevelopment of the open source software in the projects is done by the project participants. This will be members by the OpenRail Association in many cases, but this is not a prerequisite. All projects follow an open governance model, which means that decision are taken transparently and participation in projects is based on merits. The OpenRail Association makes sure that these principles are followed for its projects, but leaves projects a lot of autonomy to organize themselves in the way which is most suitable for the project. Control about the content of the project is fully with the projects. The OpenRail Foundation does not provide funding for development.\nThe incubation process defines how projects can become part of the OpenRail Association and what conditions have to be met at which stage. The first step is to apply to be hosted as an official OpenRail Association project. Here is how:\nDecide on adopting an open source model # Open Source provides a lot of benefits: faster innovation, more efficiency, better interoperability. To realize these benefits you need to commit to going with the open source model. This means sharing the code under an open source license, but also to adopt an open governance model, where it\u0026rsquo;s transparent how decisions are taken, and there is a fair opportunity for contribute on eye-level based on the merits of your contributions.\nAdopting this model needs some courage. It means giving up central control and adopting a model of collaborative ownership. It means giving up management by status or power and adopting leadership by quality contributions. It means giving up working behind closed doors and adopting transparent collaboration in public. If you bring up this courage, you will be rewarded by a very effective and enjoyable environment which will deliver results with a speed and quality you might not have seen before.\nWhen you have decided to go the open source way, the OpenRail Association might be the path you choose:\nCheck if the project is in the scope of the OpenRail Association # The OpenRail Association facilitates development of open source software in the railway sector. The focus is on railway specific software, which addresses needs of the railway domain. It\u0026rsquo;s not about generic IT infrastructure which is needed by any sector. For these projects other foundations might be a more suitable host. That said, the OpenRail Association is open. If it\u0026rsquo;s about a use case rooted in the railway domain, your project is likely to fit. If in doubt, please ask.\nNote that the current focus of the OpenRail Association is open source software, not open data. We realize that open data is an element in a lot of open source projects, especially in the railway domain. So here as well, if in doubt, please ask.\nOnce you have decided that the OpenRail Association is the right path, go on to the actual application:\nFill out the questionnaire for new projects # There is a questionnaire which helps you to collect the relevant information which is required to describe your project and give the base for the decision of the OpenRail Association on acceptance of your project as an officially hosted OpenRail project.\nTake the questionnaire and open a pull request in the repository of the technical committee where you add the questionnaire as a project proposal with the answers of your project filled in.\nThe Technical Committee will evaluate the proposal and get in contact with you to clarify any open questions and get the proposal into a shape which is suitable for acceptance.\nThen it\u0026rsquo;s decision time:\nDecision on acceptance of the new project # Once the proposal is ready and you and the Technical Committee have decided that the project is a fit for the OpenRail Association, the board of the OpenRail Association has the final say in deciding on the acceptance of the project.\nIf the project proposal is accepted by the Technical Committee and the board, congratulations, you have a new OpenRail project. It\u0026rsquo;s ready to be onboarded now.\n"},{"id":1,"href":"/technical-committee/docs/practices/dco/","title":"DCO","section":"Good Practices","content":" Signing off commits with the Developer Certificate of Origin (DCO) # In order to provide clarity about the provenance of code being contributed to OpenRail projects, we use the Developer Certificate of Origin (DCO).\nThis means that with each commit the author of the commit includes a statement which means that they are contributing the code under the license of the project, that they have all rights to do so, and that they are fine with this information being stored publicly. This is called \u0026ldquo;signing off\u0026rdquo; a commit and it\u0026rsquo;s done by adding a \u0026ldquo;Signed-Off-By\u0026rdquo; trailer with the email address of the author of the commit in the commit message. The trailer then looks like this:\nSigned-Off-By: Jane Doe \u0026lt;jane@example.org\u0026gt; For projects on stage 2 and 3 of the incubation process, the DCO is required. Projects on stage 1 can choose to require it as well. Projects which require the DCO have the DCO App enabled, which checks pull requests for the DCO statements and throws an error if they are missing.\n[!NOTE] If you are using merge queue, you should not use DCO App. Because of a bug the bot doesn\u0026rsquo;t run in a merge queue. You can use instead dco-check github action.\nSigning off on the command line # When using git on the command line you can sign off a commit by adding the option -s or --signoff to the commit command:\ngit commit -s This will add the proper text to the commit message using your git configuration for user.name and user.email.\nWhen you have forgotten to add the trailer to a commit you can fix the most recent commit by running\ngit commit --amend --signoff This will add the correct trailer and give you the opportunity to edit the commit message.\nSigning off in the web UI # When a repository is configured to require sign off on web-based commits, GitHub automatically adds the necessary trailers when doing commits through the web UI. The buttons in the UI then say \u0026ldquo;Sign off and commit\u0026rdquo; instead of \u0026ldquo;Commit\u0026rdquo; and by pressing the button you explicitly sign off the commit.\n"},{"id":2,"href":"/technical-committee/docs/joining/","title":"Joining OpenRail","section":"Docs","content":"How to join the OpenRail Association as an open source project.\nThe OpenRail Association welcomes open source projects which address challenges and solve problems of the railway sector. Here you find documentation about the steps of joining the OpenRail Association as a project.\nApplication Onboarding Open Governance Technical Commitee In case you have any questions feel free to reach out to the Technical Committee.\n"},{"id":3,"href":"/technical-committee/docs/joining/onboarding/license-review/","title":"License Review","section":"Onboarding a project","content":" Review licensing of future/current OpenRail projects # Doing a license review of a project is part of the OpenRail project incubation process, and it might also make sense to make a review continuously or once in a while. This document presents the necessary and possible steps while the mandatory or optional triggers are discussed in other places.\nOur licensing review focuses on the licensing situation of the own code of the project and the used dependencies.\nThe following steps are proposed:\nFind out licenses of and inside own code Gather dependencies and their licenses Evaluate found licenses and dependencies To check Open Source license compliance, we make use of several tools that may not be present on your machine. Primarily, we use OpenRail\u0026rsquo;s compliance-assistant, but syft and grype also might be useful/required for some optional steps or used as alternatives.\n1. Find license(s) of and inside own code # To find the license of the own code and potential secondary licenses, you can use and mix different steps:\na) Look at License files # Take a look files such as LICENSE, COPYING or inside a LICENSES folder. Check out what\u0026rsquo;s written inside of a README or CONTRIBUTING file. b) Search for license statements: manually # Search for licenses using these commands:\ngit grep -i \u0026quot;licen[s|c]\u0026quot; git grep -iE \u0026quot;copy(right|left)\u0026quot; git grep -i \u0026quot;public domain\u0026quot; Analyse the findings for licensing/copyright by third parties. Note down these licenses and include them into their consideration.\nc) Search for license statements: automatically # You can use a tool like the SBOM Workbench by ScanOSS. This may help you finding re-used snippets, e.g. from StackOverflow, which introduce other licenses and copyrights.\nd) Ask the project team # An open discussion with the project team might also reveal the use of code from third parties, e.g. by external contractors or from company-internal projects. Make sure to understand the history of the project.\n2. Gather dependencies and their licenses # a) Create SBOM # One of these two steps are recommended and usually return the same results:\nUsing compliance-assistant: compliance-assistant sbom generate -d /path/to/code -o sbom.json Using syft: syft scan /path/to/code -o cyclonedx-json \u0026gt; sbom.json b) Enrich SBOM # Enrich the SBOM with quite accurate licensing data from ClearlyDefined, and creates a new file:\ncompliance-assistant sbom enrich -f sbom.json -o sbom-enriched.json\nc) Extract and evaluate licensing data # Next, we extract and unify all contained Open Source licenses:\ncompliance-assistant licensing list -f sbom-enriched.json -o plain\nExample output:\n0BSD Apache-2.0 Apache-2.0 AND MIT Apache-2.0 OR MIT BSD-2-Clause BSD-3-Clause BSD-3-Clause OR GPL-2.0-only BlueOak-1.0.0 CC-BY-3.0 CC-BY-4.0 CC0-1.0 ISC ISC AND MIT LGPL-3.0-or-later MIT Python-2.0 Unlicense 3. Evaluate found licenses and dependencies # a) Check license compatibility and outbound license # When the project plans to distribute all code and its dependencies in bundled packages, it might make sense to check whether the licenses of own code and the dependencies are compatible and whether a \u0026ldquo;combined\u0026rdquo; license can be derived.\nThis is not easy to evaluate automatically, and tools often have a hard time putting a larger number of licenses together. The compliance assistant provides this experimental feature:\ncompliance-assistant licensing outbound -f sbom-enriched.json\nb) Check for security issues # We can use grype to check the dependencies for known security vulnerabilities. May be useful to assess potential security risks:\ngrype --add-cpes-if-none sbom:sbom-enriched.json\n"},{"id":4,"href":"/technical-committee/docs/incubation/sandbox/","title":"Sandbox","section":"Incubation Stages","content":" Activities at the Sandbox stage # The Sandbox is the initial stage for OpenRail projects. Prerequisite is that the project is committed to run as open source project within the OpenRail Association and matches the basic requirements such as that the code ready to be released under an open source license.\nThe Sandbox stage is meant for building up the project, establishing open governance and good development practices, and sorting out the structure of the project from a technical and organizational perspective.\nThe goal of the activities in the sandbox stage is to establish a high quality for the project so that it is ready for users to be used in production. Once it has reached that it\u0026rsquo;s ready to move to the next stage, Incubated.\n"},{"id":5,"href":"/technical-committee/docs/joining/onboarding/","title":"Onboarding a project","section":"Joining OpenRail","content":" Onboarding a project as OpenRail project # Once an open source project officially is accepted as OpenRail project, it goes through an onboarding process. As part of this process the code is moved to the OpenRail Association, a representative of the project is added to the technical committee, and it\u0026rsquo;s made sure that the project meets the minimal standards required by the OpenRail Association and is properly presented on the web site etc.\nThere is an onboarding checklist which defines the steps to be done during onboarding in detail. The Technical Committee assigns a person as onboarding partner which works with the representative of the project through the checklist. Onboarding progress is tracked on GitHub as issues.\nPart of the onboarding is a license review to make sure that all code hosted by the OpenRail Association is open source and there are no other licensing issues.\n"},{"id":6,"href":"/technical-committee/docs/practices/reuse/","title":"REUSE","section":"Good Practices","content":" Adopt REUSE to ensure licensing transparency # OpenRail projects are supposed to enable users to easily and safely comply with licensing requirements. Starting from Incubation Stage 2, projects are required to adopt REUSE best practices for licensing and copyright information.\nREUSE ensures that for every file in a project there is unambiguous information about their license and copyright. It provides a clear standard, along with tools and services, to help with achieving and maintaining this clarity.\nThis document helps with the adoption by providing links to relevant material and making recommendations for OpenRail projects.\nResources for understanding REUSE # Instead of duplicating guides, we refer to helpful material that already exists and is maintained by REUSE:\nTutorial on how to become REUSE compliant: make a repository REUSE compliant in simple steps, without delving into details and edge cases. FAQ on general questions but also how to deal with edgier cases in your project. Tools and scripts specifically for developers, such as the helper tool, API, pre-commit hooks, and CI checks Recommended process for OpenRail projects # For Incubation Stage 2, we require projects to be fully REUSE compliant. This is measured by whether the reuse lint command exits successfully, but requires that the projects carefully check the licenses and copyright of all their files.\nAnalyse your codebase # When thinking about licensing and copyright of all your files, tricky questions may arise:\nAre all files licensed the same way, or have files been copied from other projects under different licenses and copyrights? Who owns the copyright of all the files? Just one organization, or were there contractors or external companies who acted under their own copyright? Are there files that are not licensed under the \u0026ldquo;main\u0026rdquo; license, e.g., icons, fonts, graphics, pictures? Annotating all files # Once all these questions have been answered, they must be put into practice by documenting copyright and licensing information following the REUSE standard for all your files. Ideally, each file will be annotated directly, so equipped with a comment header containing licensing and copyright information. This gives the maximum clarity. If this isn\u0026rsquo;t possible or not feasible (e.g., for binary or test files), one of the alternatives REUSE offers shall be chosen.\nWhile the required information for REUSE compliance may be put manually into all files, it is strongly advised to make use of e.g. the REUSE helper tool that semi-automates many steps. However, manual checks and careful thoughts are mandatory, as described above.\nEnsuring and communicating REUSE adoption # We require two additional steps to ensure that the best practices will be kept:\nIntegrate a REUSE check into your CI, to ensure that new files without proper licensing/copyright annotation issue a warning. Possibilities are explained here, e.g. via a GitHub action. Register the project with the REUSE API and put the resulting badge into your README file. This will demonstrate the adoption of this standard and therefore the re-usability to potential users and contributors. Trademarks and further restrictions # There may be further legal restrictions and rights you need to consider, for example trademarks and usage restrictions on logos and fonts. REUSE only covers licenses and copyrights. Therefore, you should communicate such additional legal information in the README file. Please make sure to be transparent and helpful to potential users and contributors how they can use or modify these special parts.\n"},{"id":7,"href":"/technical-committee/docs/incubation/incubated/","title":"Incubated","section":"Incubation Stages","content":" Advancing to the Incubated stage # The Incubated stage is for projects which already have reached a high level of quality and are ready to be used in production. They have mature development practices and a solid base of contributors.\nThe goal of the Incubated stage is to make the project ready to be considered a standard solution in the domain the project operates in. This includes providing a healthy base of contributors and users from different organizations, putting the project on a broad and stable base.\nOnce the project has reached this level of adoption it\u0026rsquo;s ready to move to the next stage, Graduated.\nProjects on the Incubated stage are required to have adopted these practices:\nDCO [REUSE]({{ ref reuse }}) "},{"id":8,"href":"/technical-committee/docs/practices/security/","title":"Security","section":"Good Practices","content":" Establish security best practices # OpenRail projects are supposed to follow security best practices. Especially projects from Incubation Stage 2 onwards must follow these to ensure that users can trust them.\nSome best practices are technical, others rather relate to communication and documentation. We are aware that there can be different perspectives on the selection and priority of certain criteria, but this document defines a baseline which the OpenRail projects agree on.\nVulnerability management of dependencies # Open Source projects typically depend on dozens to thousands of other Open Source projects. These dependencies are updated by their respective maintainers and may contain known vulnerabilities.\nTo properly manage dependencies and potential risks, OpenRail projects should:\nuse pinned dependencies to ensure a clear picture of the software supply chain, setup a system that automatically detects all dependencies and checks them against vulnerability databases, setup a system that automatically warns maintainers about detected vulnerabilities and ideally prepares pull requests to update these dependencies if a fix is available, and regularly update all dependencies to their latest (stable) versions to ensure that unknown security issues are also fixed. There are numerous technical solutions that assist maintainers with these steps, e.g. GitHub\u0026rsquo;s Dependabot or Renovate. OpenRail doesn\u0026rsquo;t mandate a specific solution but recommends to choose a popular, well-supported one.\nOpenSSF Scorecard # The OpenSSF Scorecard is a method and tool to quickly assess Open Source projects for risky practices. Apart from just vulnerabilities it also reports about best and bad practices such as CI tests, code reviews or excessive token permissions. As with most scorecards, opinions on the items and their scoring may differ, but it provides a good overview.\nOpenSSF Scorecard can be run locally or as a GitHub action in CI steps. The checks can be quite resource-expensive, so should not be triggered on every commit.\nDepending on the Incubation stage, OpenRail requires a minimum score. If a check is required by the incubation stage, its score must be communicated in the project\u0026rsquo;s README.md with a date of the last check, and updated when things change or at least once a year. However, an automatic check is not necessary.\nSecurity Policy # OpenRail projects are requested to provide a security policy that gives people instruction to report security issues. This security policy must be inside a file called SECURITY.md, as documented by GitHub.\nOpenRail projects are free to decide whether they provide an email address to send confidential security reports to, or use GitHub features such as the \u0026ldquo;private vulnerability reporting\u0026rdquo;.\n"},{"id":9,"href":"/technical-committee/docs/joining/governance/","title":"Setting up open governance","section":"Joining OpenRail","content":" Setting up open governance # We believe that the full power of open source is unleashed when open source is followed not only by the letter but also in spirit. That\u0026rsquo;s why we require projects to not only adopt an open source license for the code but also an open and transparent collaboration model. We (and others) call that open governance.\nPrinciples # Following the statutes of the OpenRail Association and the charter of its Technical Committee we follow certain principles for open governance:\nNeutral Ground. The OpenRail Association acts as the neutral ground where diverse contributors and contributing organizations meet on eye-level to work on a common goal. Transparent Decisions. Decisions are taken in a transparent way. It\u0026rsquo;s clear who decides and how you can contribute to a decision. Clear Contributor Path. There is a clear path to becoming a committer and maintainer of a project. That does not mean that everybody can become a committer and maintainer, but that the process and criteria a clearly defined. Contributions based on Merits. Contributions to our projects are judged based on the merit of the contribution for the project not based on status or affiliation of the contributors. Shared Ownership. No contributing party holds exclusive rights on any part of the project through trademarks or any other mechanisms. Ownership is shared by contributors. The OpenRail Association acts as a trusted host. No surprises. Planning and decision making is taking place in public, so that people know what to expect from the project, and roadmaps are transparent. Surprises are minimized. Implementation # Projects are required to adopt an open governance model. The Technical Committee guides, advises and supports projects in doing so. The Technical Committee is responsible for shaping and running the incubation process which defines how projects can become part of the OpenRail Association and what requirements they have to meet to advance to more mature stages. Adhering to open principles is a significant part of this.\nAs a base for projects to define their governance rules the Technical Committee also maintains a set of templates for setting up a minimum viable open governance. These templates can acts as a set of default documents, a starting point for defining more sophisticated models, and a baseline to check existing documents against.\nWhen you are part of the OpenRail Association as a project, you will work with the Technical Committee to set up and refine your governance according to open governance principles, so that you can use the full power of open source.\n"},{"id":10,"href":"/technical-committee/docs/incubation/graduated/","title":"Graduated","section":"Incubation Stages","content":" Advancing to the Graduated stage # The Graduated stage is the most advanced and mature stage of the incubation process. This is for projects which have proven to have a great quality and adoption. These are the lighthouse projects the OpenRail Association recommends for production use throughout the industry.\nProjects on the Graduated stage are required to have adopted these practices:\nDCO [REUSE]({{ ref reuse }}) SBOM generation for all release artifacts "},{"id":11,"href":"/technical-committee/docs/joining/technical-committee/","title":"Participating in the Technical Committee","section":"Joining OpenRail","content":" Participating in the Technical Committee # The Technical Committee is the working body of the OpenRail Association which acts as a bridge between the organization and the projects. It runs the incubation process and supports projects to work as high quality open-source projects. The Technical Committee is a hands-on group which jointly does the overarching work necessary to support a healthy ecosystem of open source projects within the OpenRail Association.\nEach project can send a representative into the Technical Committee. As a project you need to name a person who gets invited to the weekly meetings of the Technical Committee and has voting rights on decisions taken there. That said, almost all decisions are taken by consensus and those who do the actual work. We maintain a very collaborative culture there.\nMore information about the Technical Committee can be found in its charter. The group can be reached via email at technical-committee@openrailassociation.org.\n"},{"id":12,"href":"/technical-committee/docs/incubation/retired/","title":"Retired","section":"Incubation Stages","content":" Retiring a project # Project which are not longer maintained and aren\u0026rsquo;t recommended for active use anymore are moved to the Retired stage.\n"},{"id":13,"href":"/technical-committee/docs/incubation/","title":"Incubation Stages","section":"Docs","content":" Progressing in the Incubation Process # The lifecycle of projects in the OpenRail Association is managed with the incubation process. The first step is to get accepted as an OpenRail project:\nApplying to become an OpenRail project Once you are an OpenRail project you can progress within the incubation process while the project matures. The advanced stages signify a high project quality. On the highest stage projects become official recommendations of the OpenRail Association for production use cases in specific domains of the railway business.\nThe following guides describe activities on the various stages and how to advance to the next stage.\nActivities at the Sandbox Stage Advancing to the Incubated Stage Advancing to the Graduated Stage A project which is not longer active and maintained is formally retired:\nRetiring a project "},{"id":14,"href":"/technical-committee/docs/practices/","title":"Good Practices","section":"Docs","content":" Adopt good practices for projects # We strive to achieve a high degree of quality and maturity for open source projects hosted by the OpenRail Association. Our incubation process supports this by gradually setting requirements and recommendations for good practices to be adopted by projects. Requirements become stricter with advancing in the incubation process, so that the different incubation process transparently guarantee a certain level of maturity.\nWe generally orient ourselves at general good practices from the open source community. For some of the key practices we maintain specific documentation here:\nDCO REUSE Security "},{"id":15,"href":"/technical-committee/docs/infrastructure/","title":"Technical Infrastructure","section":"Docs","content":" Overview of OpenRail\u0026rsquo;s Technical Infrastructure # The technical infrastructure of the OpenRail Association is comprised of various components to enable the work of the OpenRail projects as well as of different working groups such as the OpenRail Team.\nFor the composition, we follow these principles:\nWe prefer using Open Source software and services We pragmatically choose software and services based on their ability to address our specific needs. We strive for ease of access and use for the respective users and teams We prefer using hosted services instead of self-hosting We appreciate modularity, and accept incremental improvements when perfection is not possible In combination, we sometimes cannot find a technical solution to a problem that matches all these principles at the same time. Therefore, we need to weigh all aspects individually. Projects are welcome to articulate their suggestions within the Technical Committee.\nGovernance # The Technical Infrastructure Manager, part of the OpenRail Team, is responsible for the overall infrastructure. They do this in close collaboration with the Technical Committee as well as other users inside the organisation. They can define assistants to avoid that all knowledge and accesses reside with only one person.\nThe current Technical Infrastructure Manager is Max Mehl (@mxmehl). He is assisted by Cornelius Schumacher (@cornelius).\nDomains # OpenRail Association registers and manages all of its domains via INWX, a Germany-based domain registrar. This also contains domains by OpenRail projects.\nINWX supports sub-accounts which may be used to allow tools and other persons to access only specific parts of the account.\nProjects may control their domains on their own. Please see the document about Managing Domain Names for guidance and details.\nGitHub # OpenRail Association prefers using GitHub.com for hosting of code, projects and documentation. All official repositories - e.g., by OpenRail projects, working groups, for administrative projects - must be part of the OpenRailAssociation GitHub organisation.\nFor this GitHub organisation, we distribute permissions using Teams and a repository that follows a four-eyes and version-controlled paradigm. Please see the detailed document about Managing GitHub for guidance and details.\nIn addition to the official GitHub organisation, there is an organisation for experimental and other projects which need a space for initial or temporary collaboration without being ready for an application as official project. It is the organisation OpenRail-Playground. Permissions are controlled individually using the GitHub web interface.\nMails and Mailing Lists # OpenRail Association runs a number of email addresses via which people can reach us and individual teams. We don\u0026rsquo;t run a mail server ourselves but use two intertwined services: the MailEasy product by our domain registrar INWX and mailing lists by Mailman3.com, a provider of mailing lists using the Open Source software Mailman 3.\nThe MailEasy product as part of INWX\u0026rsquo;s hosting services doesn\u0026rsquo;t provide mail boxes but only forwards. This way, we can configure certain addresses such as technical-committee@openrailassociation.org to forward received emails to another address. In some instances, this is one or multiple persons individually (e.g. the Technical Infrastructure Manager), but more often its a larger group of people.\nIn these cases, we address these people using mailing lists. This allows for more fine-grained configuration of who can contact this group, and has advantages when dealing with anti-spam techniques such as SPF, DKIM and DMARC which often trigger when just using forwards.\nThere are a number of mailing lists we\u0026rsquo;ve set up on our mailing lists instance lists.openrailassociation.org. As some of them shall be reachable by outside people, we\u0026rsquo;ve set up some forwards from the openrailassociation.org domain to certain lists.openrailassociation.org lists. One example is technical-committee@openrailassociation.org which forwards to technical-committee@lists.openrailassociation.org.\nWhen setting up new lists, make sure to have a look at the list configuration of lists which have the same or a similar use-case. The default settings are often not sufficient to make all emails reach all people, especially regarding the top-level domain aliases and anti-spam measures.\nThe configuration of lists and owners is done manually inside the web interface.\nPasswords # For the several services we are using, some require dedicated accounts and passwords, while others are ties to existing user accounts, e.g. GitHub.\nIf we have to share passwords, we are using an hosted password vault, currently based on Vaultwarden/Bitwarden. The Technical Infrastructure Manager manages this vault and provides access to other people, like their assistants, on a need-to-know basis. A sub-part of this vault may also be used by other teams if they require such a service. However, we generally prefer using pre-existing, personalised accounts.\nWebsite # For website hosting, we prefer using GitHub Pages over third-party providers or self-hosting. This is also used for the main OpenRail Association website, accessible via openrailassociation.org.\nPermissions to manage these websites are set via GitHub, as explained above.\nOther Services # For the functioning of the organisation, teams may use other tools that suit their needs. One example is office tools to share documents and collaborate on them. So far, we have been using services provided by single members and didn\u0026rsquo;t see the need to set up dedicated services. While this may change in the future, we currently have other priorities.\nIf you believe OpenRail Association shall provide more technical services to make a certain team or project more efficient, please contact the Technical Committee and/or the Technical Infrastructure Manager and explain your use-case.\n"},{"id":16,"href":"/technical-committee/docs/charter/","title":"Charter","section":"Docs","content":" Charter of the Technical Committee of the OpenRail Association # Version 1.0 - Validated by the board of directors on 2024-01-29\nObjectives # The OpenRail Association\u0026rsquo;s Technical Committee (TC) is responsible for selecting and overseeing the Association\u0026rsquo;s projects to ensure that they are aligned with the Association\u0026rsquo;s goals and values. The committee works in collaboration with the Board of Directors to make informed decisions on which projects to support and provides the necessary guidance to ensure their success.\nThe Technical Committee is also responsible for the necessary software and service infrastructure for code hosting and other common tools to facilitate open source collaboration. It may delegate operation but shall be reponsible for overseeing the overall management of such tools.\nPrinciples # True to open source values - Projects shall be run according to proven open source principles and values. Equal access - Projects shall be run in a way which provides equal access to all contributors. Decisions should be taken based on the merit of a contribution and the alignment with the goals of the project not based on status or affiliation of the contributors. Transparency - Projects shall operate in a transparent way. This applies to development as well as decisions around the project. Composition of the TC # The TC is composed of:\nOne representative of each project hosted by the OpenRail Association. The representative for each project is designated by the maintainers of the corresponding project. The designation should not be changed more often than once a year. The Board of Directors can appoint up to three additional members to the TC. This is meant to bring in people with an overall technical perspective across projects and as a way to get the TC started when there are no or only few projects. All members of the TC should have a technical perspective, work towards the benefit of the projects of the OpenRail Association, and be prepared to do the hands-on work which is required as part of the tasks of the TC.\nChair of the TC # The Chair of the TC is elected once a year from among the TC members. The Chair is responsible for ensuring that meetings are conducted according to the rules described below, and for communicating the decisions made at these meetings to the Board and the wider Openrail Association community. The Chair is representing the Technical Committee as a whole, which means all projects in the Association, not only a particular project.\nThe current TC Chair is responsible for running the election of the next TC Chair and remains responsible for the TC Chair duties until the next TC Chair is elected.\nEach member of the TC has one vote for electing the chair. The candidate who gets the most votes is elected as a chair. If there is a tie between multiple candidates having the same number of most votes, another round of voting is done between the candidates which are tied. This is repeated until a single candidate gets the most votes.\nIf the Chair position is vacant, because the Chair has left the TC or for any other reason, the board of the Association assigns a person to run the election of a new Chair. The election should be concluded within one month.\nMeetings # The TC will meet regularly to discuss proposed projects and make decisions. Meetings can be in person or online. Agendas and protocols of meetings should be made available publicly. The TC can choose to open meetings to people not being members of the TC.\nDecisions # The TC should strive to make decisions consensually. The default decision mechanism is consent. If that does not result in a decision, the TC falls back to a vote, where each TC member has one vote. In case of a tie the TC Chair decides.\nIncubation process # Project selection procedure # Projects will be submitted to the Association for evaluation by the Technical Committee. Projects will be evaluated on criteria such as their alignment with the Association\u0026rsquo;s goals and values, their potential impact on the community, their technical feasibility and their ability to be sustained in the long term. The committee will then decide whether the project will be proposed to the Board of Directors to be hosted by the Association or not.\nLife cycle of projects # The TC defines criteria and a process to define the maturity of a project and how a project transitions between different maturity stages. This should include:\nGeneral criteria and requirements to be fulfilled by all projects Maturity stages and which specific criteria and requirements have to be fulfilled on which maturity stage A procedure to retire inactive, unmaintained, or obsolete projects Project guidance # The committee will provide guidance to help approved projects achieve their objectives. The TC ensures that projects are run according to open governance principles and that they respect the goals and values of the Association. Within these boundaries projects should have the freedom to operate independently and define their own governance. The TC provides templates and best practices to support projects to implement their governance.\nProjects are required to define at least one maintainer and a procedure how this maintainer is chosen and how maintainership is transitioned when a maintainer steps away from the maintainer role.\nModification of the rules of procedure # These rules of procedure may be amended by the Technical Committee in consultation with the Association. The TC proposes changes to the Board of Directors which validates them.\n"},{"id":17,"href":"/technical-committee/docs/infrastructure/domain-names/","title":"Domain Names","section":"Technical Infrastructure","content":" Manage Your Domain Names Hosted by OpenRail Association # If an OpenRail project is using a web domain, this domain shall be owned and hosted by the OpenRail Association as well. This ensures neutrality and longevity for all project contributors and users.\nRegistration # If you haven\u0026rsquo;t had a domain name for your OpenRail project before, you may request the registration of a new domain. Please contact the Technical Committee (technical-committee@openrailassociation.org).\nTransfer # If your project existed before joining OpenRail and you already have a domain name, you are requested to transfer the domain to the OpenRail Association. OpenRail\u0026rsquo;s domain registrar is INWX.\nA transfer is usually done in two steps:\nYou need a so-called \u0026ldquo;Auth Code\u0026rdquo;, a secret key that allows others to transfer a domain to one\u0026rsquo;s own realms. Additionally, many domain registrars have a \u0026ldquo;transfer lock\u0026rdquo; for domains which is activated by default. You need to disable this once we start the transfer of the domain. In order to initiate this process, please contact the Technical Committee (technical-committee@openrailassociation.org). We will discuss the exact migration steps individually with you.\nChanging DNS records # Many projects will be fine with setting some records once and only changing it very rarely. Some others may need to make adaptations more often, e.g., because they run additional infrastructure and services.\nIf your project belongs to the first group, it\u0026rsquo;s fine if you just send an email to the Technical Committee requesting a certain change.\nIf your project needs more control over its domain\u0026rsquo;s DNS records, you may manage it via the openrail-dns repository. The process is very similar to managing GitHub team permissions.\n"},{"id":18,"href":"/technical-committee/docs/infrastructure/github-management/","title":"Github Management","section":"Technical Infrastructure","content":" Manage Your Project in the OpenRail GitHub Organisation # All OpenRail projects shall be hosted within the GitHub organisation of OpenRail. As your project shares this space with numerous other repositories and members, some rules have to be followed in order to avoid confusion.\nNaming things # Naming is hard. Within OpenRail, all elements such as repositories must be prepended with a unique identifier for your project. For instance, if your project goes by the name \u0026ldquo;Fantasy Open Source Railway Improver\u0026rdquo;, all repositories and team names could start with FOSRI- or fosri-. You may get inspiration by the OSRD project and its multiple repo and teams.\nRepositories # Only owners of the OpenRail organization can create new repositories. This is to prevent clutter and unclear permissions.\nThe first repository will be set up as part of the onboarding as soon as the project has been accepted by the OpenRail Association in the incubation process.\nOn the project list we list all repositories which belong to each OpenRail project. If you need an additional repository, create a pull request there with the name of the new repository and add any details in the text of the pull request. An owner of the organization will then work with you to set it up according to your needs. Once the setup is complete the pull request will be merged, so that the repo also shows up in the official project list.\nNote that all repositories in OpenRail must be public and only contain material licensed under an Open Source license. If you need a space for private/sensible information, e.g., for deployment, you must do that elsewhere. However, all information in order to run/deploy your project must in some way be transparent to the public.\nMembers, teams, and permissions # For the OpenRail organisation, all members, teams, and repository permissions are managed in the openrail-org-config repository. The settings managed there will be synchronised using github-org-manager. That means, if you want to yourself or another maintainer to become a member of the OpenRail organisation on GitHub and configure permissions, you must do that via a pull request to openrail-org-config.\nOpenRail projects can manage their teams on their own. This is handled via the respective CODEOWNERS file which allows teams to approve and merge pull requests concerning their team settings. Obviously, this file must only contain the project\u0026rsquo;s teams, and these teams\u0026rsquo; permissions must not involve repositories from other projects.\nAll organisation members must be part of a team so that it\u0026rsquo;s clear for every person which project(s) they belong to.\nDo not add individual permissions of users to repositories. Instead, only teams and their members shall be provided certain permissions. This as well can be done using the process above.\nPlease do not make any such changes, e.g. inviting members, creating and managing teams, and changing permissions of teams for repositories, in the GitHub web interface! These changes will be reverted.\n"}]